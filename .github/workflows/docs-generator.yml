# アクション／Reusable Workflowsのドキュメントを自動生成する
#  @see https://zenn.dev/tmknom/books/pragmatic-composite-action/viewer/docs
#  @see https://zenn.dev/tmknom/articles/actdocs-github-actions
#  @see https://github.com/tmknom/docs-workflows/blob/main/.github/workflows/composite-action.yml
#  @see https://github.com/tmknom/git-push-action/blob/main/action.yml

name: Generate Documentation

on:
  workflow_call:
    inputs:
      yaml-files:
        description: |
          A JSON array of YAML file paths for documentation generation.
        type: string
        required: true

      markdown-files:
        description: |
          A JSON array of Markdown file paths where documentation should be injected.
        type: string
        required: true

      # ref:
      #   description: |
      #     The git ref to check out for documentation generation.
      #   type: string
      #   required: true

      commit-message:
        description: |
          The commit message.
        type: string
        required: true

defaults:
  run:
    shell: bash

jobs:
  pre-processing:
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    permissions:
      contents: read
    steps:
      - name: Create inputs summary
        uses: gawaooooo-sandbox/learn-github-actions-custom/composite/inputs-summary@v3
        with:
          workflow-inputs: ${{ toJSON(inputs) }}

  generate:
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    permissions:
      contents: write
      pull-requests: write
    env:
      BASE_BRANCH: ${{ github.event.repository.default_branch }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BASE_BRANCH }}

      - name: Generate Documentation for Multiple Files
        run: |
          set -x

          # Use jq to parse the JSON array properly and remove unwanted characters
          yaml_files=$(echo "${{ env.YAML_FILES }}" | jq -r '.[]')
          markdown_files=$(echo '${{ env.MARKDOWN_FILES }}' | jq -r '.[]')

          # Convert strings to arrays
          IFS=$'\n' read -r -d '' -a yaml_files <<< "$yaml_files"
          IFS=$'\n' read -r -d '' -a markdown_files <<< "$markdown_files"

          for index in "${!yaml_files[@]}"; do
            yaml_file=${yaml_files[index]}
            markdown_file=${markdown_files[index]}

            # Check if the Markdown file exists, if not, create an empty file
            if [ ! -f "$markdown_file" ]; then
              echo "Creating empty Markdown file: $markdown_file"
              mkdir -p "$(dirname "$markdown_file")"  # Ensure the directory exists
              touch "$markdown_file"
            fi
            docker run --rm -v "$(pwd):/work" -w "/work" ghcr.io/tmknom/actdocs inject --sort --file "$markdown_file" "$yaml_file"
          done
        env:
          YAML_FILES: ${{ inputs.yaml-files }}
          MARKDOWN_FILES: ${{ inputs.markdown-files }}

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Git diff status
        id: git-diff-status
        run: |
          echo "::group::Git diff status"
          set -x
          if [[ -z $(git status --porcelain) ]]; then
            echo "No changes to commit."
            echo "diff=false" >> "${GITHUB_OUTPUT}"
          else
            echo "Changes detected."
            echo "diff=true" >> "${GITHUB_OUTPUT}"
          fi
          echo "::endgroup::"

      - name: Git push
        id: git-push
        if: ${{steps.git-diff-status.outputs.diff == 'true'}}
        env:
          MESSAGE: ${{ inputs.commit-message }}
        run: |
          echo "::group::Git push"
          set -x

          branch="docs/$(date +%Y%m%d-%H%M%S)-${GITHUB_RUN_ID}"
          log="Generated by ${GITHUB_WORKFLOW} workflow."
          url="- ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"

          git switch -c "${branch}"
          git add .
          git commit -m "${MESSAGE}" -m "${log}" -m "${url}"
          git push origin "${branch}"
          echo "branch=${branch}" >> "${GITHUB_OUTPUT}"
          echo "::endgroup::"

      - name: Create PR
        if: ${{ steps.git-push.outcome == 'success'}}
        env:
          BRANCH: ${{ steps.git-push.outputs.branch }}
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -x
          gh pr create --base "${BASE_BRANCH}" --head "${BRANCH}" --fill-first
