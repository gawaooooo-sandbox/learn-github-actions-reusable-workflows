name: Generate Documentation

on:
  workflow_call:
    inputs:
      doc-type:
        description: |
          Type of documentation to generate: workflow or composite.
        type: string
        required: false
        default: "workflow"

      commit-message:
        description: |
          Provide a commit message that describes the documentation updates.
        type: string
        required: true

      ref:
        description: |
          The git ref to check out for documentation generation.
        type: string
        required: false

      remove-pre-tags:
        description: |
          Remove <pre> tags from the generated Markdown files.
        type: boolean
        required: false
        default: true

    outputs:
      branch:
        value: ${{ jobs.prepare-and-generate.outputs.branch }}
        description: Name of the pushed branch.

defaults:
  run:
    shell: bash

jobs:
  prepare-and-generate:
    name: Generate ${{ inputs.doc-type }} documentation
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    permissions:
      contents: write
      pull-requests: write
    env:
      BASE_BRANCH: ${{ github.event.repository.default_branch }}
    outputs:
      branch: ${{ steps.git-push.outputs.branch }}

    steps:
      - name: Create inputs summary
        uses: gawaooooo-sandbox/learn-github-actions-custom/composite/inputs-summary@v3
        with:
          workflow-inputs: ${{ toJSON(inputs) }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || env.BASE_BRANCH }}

      - name: Collect YAML ans Markdown files
        id: collect
        run: |
          echo "::group::Collect YAML and Markdown files"

          set -xeu

          DOC_TYPE="${{ inputs.doc-type }}"
          if [ "${DOC_TYPE}" == "workflow" ]; then
            # Find all YAML files in the workflows directory
            yaml_files=$(find .github/workflows -name '*.yml' -not -path '*internal*' | paste -sd "," -)

            # path/to/file1.yml → docs/file1.md
            markdown_files=$(echo "$yaml_files" | sed 's/.github\/workflows\//docs\//g' | sed 's/.yml/.md/g')

          elif [ "${DOC_TYPE}" == "composite" ]; then
            # Find all YAML files in the composite directory
            yaml_files=$(find composite -name 'action.yml' | paste -sd "," -)

            # composite/path/to/file1/action.yml → docs/path/to/file1.md
            markdown_files=$(echo "$yaml_files" | sed 's/composite\//docs\//g' | sed 's/\/action.yml/.md/g')

          else
            echo "::error::Invalid doc-type value '${DOC_TYPE}'. It must be either 'workflow' or 'composite'."
            exit 1
          fi

          # Output the list of YAML and Markdown files
          echo "yaml-files=$yaml_files" >> "$GITHUB_OUTPUT"
          echo "markdown-files=$markdown_files" >> "$GITHUB_OUTPUT"

          echo "::endgroup::"

      - name: Generate Documentation for Multiple Files
        run: |
          echo "::group::Generate Documentation for Multiple Files"

          set -xeu

          YAML_FILES="${{ steps.collect.outputs.yaml-files }}"
          MARKDOWN_FILES="${{ steps.collect.outputs.markdown-files }}"

          # カンマ区切りの文字列を配列に変換
          IFS=',' read -r -a yaml_files <<< "$YAML_FILES"
          IFS=',' read -r -a markdown_files <<< "$MARKDOWN_FILES"

          echo "YAML files array:"
          for file in "${yaml_files[@]}"; do
            echo "$file"
          done

          echo "Markdown files array:"
          for file in "${markdown_files[@]}"; do
            echo "$file"
          done

          for index in "${!yaml_files[@]}"; do
            yaml_file=${yaml_files[index]}
            markdown_file=${markdown_files[index]}

            # Remove the extension from the YAML file name
            yaml_file_base=$(basename "$yaml_file" .yml)
            yaml_file_base=$(basename "$yaml_file_base" .yaml)

            # Check if the Markdown file exists, if not, create an empty file
            if [ ! -f "$markdown_file" ]; then
              mkdir -p "$(dirname "$markdown_file")"
              cat <<EOF > "$markdown_file"
          ---
          title: ${yaml_file_base}
          layout: default
          ---

          # ${yaml_file_base}
          {: .no_toc }

          ## Table of contents
          {: .no_toc .text-delta }

          1. TOC
          {:toc}

          ---

          {% raw %}
          <!-- actdocs start -->

          <!-- actdocs end -->
          {% endraw %}
          EOF
            fi

            docker run --rm -v "$(pwd):/work" -w "/work" ghcr.io/tmknom/actdocs inject --omit --sort --file "$markdown_file" "$yaml_file"
          done

          echo "::endgroup::"

      - name: Remove <pre> tags from the generated Markdown files.
        if: ${{ inputs.remove-pre-tags }}
        run: |
          echo "::group::Remove <pre> tags from the generated Markdown files."

          set -xeu

          MARKDOWN_FILES="${{ steps.collect.outputs.markdown-files }}"

          # Check if MARKDOWN_FILES is not empty
          if [[ -z "$MARKDOWN_FILES" ]]; then
            echo "::notice::No markdown files to process."
            exit 0
          fi

          # Save the original IFS
          ORIGINAL_IFS=$IFS
          IFS=',' read -r -a markdown_files <<< "$MARKDOWN_FILES"

          for markdown_file in "${markdown_files[@]}"; do
            if [[ -f "$markdown_file" ]]; then
              sed -i 's/<pre>//g' "$markdown_file"
              sed -i 's#</pre>##g' "$markdown_file"
            else
              echo "::notice::File not found: $markdown_file"
            fi
          done

          # Restore the original IFS
          IFS=$ORIGINAL_IFS

          echo "::endgroup::"

      - name: Configure Git
        uses: gawaooooo-sandbox/learn-github-actions-custom/composite/git-config@v3

      - name: Git diff status
        id: git-diff-status
        run: |
          echo "::group::Git diff status"
          set -xeu

          if [[ -z $(git diff --name-only -- 'docs/*.md') ]]; then
            echo "No changes to commit."
            echo "diff=false" >> "$GITHUB_OUTPUT"
          else
            echo "Changes detected."
            echo "diff=true" >> "$GITHUB_OUTPUT"
          fi
          echo "::endgroup::"

      - name: Git push
        id: git-push
        if: ${{steps.git-diff-status.outputs.diff == 'true'}}
        env:
          MESSAGE: ${{ inputs.commit-message }}
          TZ: Asia/Tokyo
        run: |
          echo "::group::Git push"
          set -xeu

          branch="docs/$(date +%Y%m%d-%H%M%S)-${GITHUB_RUN_ID}"
          log="Generated by ${GITHUB_WORKFLOW} workflow."
          url="- ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"

          git switch -c "${branch}"
          git add docs/*.md
          git commit -m "${MESSAGE}" -m "${log}" -m "${url}"
          git push origin "${branch}"
          echo "branch=${branch}" >> "$GITHUB_OUTPUT"
          echo "::endgroup::"

      - name: Fetch to update remote branches
        if: ${{ steps.git-push.outcome == 'success'}}
        run: git fetch

      - name: Create PR
        if: ${{ steps.git-push.outcome == 'success'}}
        env:
          BRANCH: ${{ steps.git-push.outputs.branch }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -xeu
          gh pr create --base "${BASE_BRANCH}" --head "${BRANCH}" --fill-first
